{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Gleam",
  "patterns": [
    {
      "include": "#support"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#entity"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#constant"
    },
    {
      "include": "#punctuation"
    }
  ],
  "repository": {
    "support": {
      "patterns": [
        {
          "name": "support.function.gleam",
          "match": "\\b(todo)\\b"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.accessor.gleam",
          "match": "(\\.)"
        },
        {
          "name": "punctuation.separator.comma.gleam",
          "match": "(,)"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.case.gleam",
          "match": "\\b(case)\\b"
        },
        {
          "name": "keyword.control.conditional.gleam",
          "match": "\\b(if)\\b"
        },
        {
          "name": "keyword.control.trycatch.gleam",
          "match": "\\b(try|assert)\\b"
        },
        {
          "name": "storage.type.modifier.gleam",
          "match": "\\b(opaque|external)\\b"
        },
        {
          "name": "keyword.control.export.gleam",
          "match": "\\b(pub)\\b"
        },
        {
          "name": "storage.type.gleam",
          "match": "\\b(let|const)\\b"
        },
        {
          "name": "storage.type.function.gleam",
          "match": "\\b(fn)\\b"
        },
        {
          "name": "storage.type.class.gleam",
          "match": "\\b(type)\\b"
        },
        {
          "name": "keyword.control.import.gleam",
          "match": "\\b(import)\\b"
        },
        {
          "name": "keyword.control.as.gleam",
          "match": "\\b(as)\\b"
        },
        {
          "name": "keyword.control.use.gleam",
          "match": "\\b(use)\\b"
        },
        {
          "name": "keyword.operator.tuple.gleam",
          "match": "#"
        },
        {
          "name": "keyword.operator.type.annotation.gleam",
          "match": ":"
        },
        {
          "name": "keyword.operator.arrow.gleam",
          "match": "(<\\-|\\->)"
        },
        {
          "name": "keyword.operator.pipe.gleam",
          "match": "\\|>"
        },
        {
          "name": "keyword.operator.splat.gleam",
          "match": "\\.\\."
        },
        {
          "name": "keyword.operator.comparison.float.gleam",
          "match": "(<=\\.|>=\\.|==\\.|!=\\.|<\\.|>\\.)"
        },
        {
          "name": "keyword.operator.comparison.int.gleam",
          "match": "(<=|>=|==|!=|<|>)"
        },
        {
          "name": "keyword.operator.logical.gleam",
          "match": "(&&|\\|\\|)"
        },
        {
          "name": "keyword.operator.string.gleam",
          "match": "<>"
        },
        {
          "name": "keyword.operator.other.gleam",
          "match": "\\|"
        },
        {
          "name": "keyword.operator.match.gleam",
          "match": "="
        },
        {
          "name": "keyword.operator.arithmetic.float.gleam",
          "match": "(\\+\\.|\\-\\.|/\\.|\\*\\.|%\\.)"
        },
        {
          "name": "keyword.operator.arithmetic.int.gleam",
          "match": "(\\+|\\-|/|\\*|%)"
        },
        {
          "name": "keyword.operator.assignment.gleam",
          "match": "="
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.gleam",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.gleam",
          "match": "\\\\."
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.gleam",
          "match": "\/\/.*"
        }
      ]
    },
    "constant": {
      "patterns": [
        {
          "include": "#binary_number"
        },
        {
          "include": "#octal_number"
        },
        {
          "include": "#hexadecimal_number"
        },
        {
          "include": "#decimal_number"
        },
        {
          "include": "#boolean"
        },
        {
          "name": "entity.name.type.gleam",
          "match": "[[:upper:]][[:word:]]*"
        }
      ]
    },
    "binary_number": {
      "name": "constant.numeric.binary.gleam",
      "match": "\\b0b[0-1]+\\b",
      "patterns": []
    },
    "octal_number": {
      "name": "constant.numeric.octal.gleam",
      "match": "\\b0o[0-7]+\\b",
      "patterns": []
    },
    "decimal_number": {
      "name": "constant.numeric.decimal.gleam",
      "match": "\\b[[:digit:]][[:digit:]_]*(\\.[[:digit:]]*)?\\b",
      "patterns": []
    },
    "hexadecimal_number": {
      "name": "constant.numeric.hexadecimal.gleam",
      "match": "\\b0x[[:xdigit:]]+\\b",
      "patterns": []
    },
    "boolean": {
      "name": "constant.language.boolean.gleam",
      "match": "\\b(True|False)\\b",
      "patterns": []
    },
    "entity": {
      "patterns": [
        {
          "match": "[^\\w*](_+\\w*\\b)",
          "captures": {
            "1": {
              "name": "source.ignore.gleam"
            }
          }
        },
        {
          "match": "(\"\\w+(?:\\/*\\w+\\.{1}(?:js|mjs|cjs)+)*\") (\"\\w+\")",
          "captures": {
            "1": {
              "name": "string.other.external.module.gleam"
            },
            "2": {
              "name": "string.other.external.function.gleam"
            }
          }
        },
        {
          "match": "(\\bimport\\b)(\\s\\w+)|\\/([a-z_]+)",
          "captures": {
            "0": {
              "name":"meta.import.gleam"
            },
            "1": {
              "name": "keyword.control.import.gleam"
            },
            "2": {
              "name": "entity.name.import.gleam"
            },
            "3": {
              "name": "variable.other.constant.gleam"
            }
          }
        },
        {
          "match": "\\b((?!\\bfn\\b)[a-z][a-z_]*)\\(",
          "captures": {
            "1": {
              "name": "entity.name.function.gleam"
            }
          }
        },
        {
          "match": "(?:{| |, |\\/|\\.|\\[|\\()(\\.\\.)*(?!\\bas\\b|\\blet\\b|\\bfn\\b|\\buse\\b|\\bconst\\b|\\bcase\\b|\\btry\\b|\\bassert\\b|\\bif\\b|\\bopaque\\b|\\bexternal\\b|\\btype\\b|\\b_+\\w*\\b|\\blet _+\\w*\\b)(\\w+\\()*([a-z_]+)(?!\\/|\\(|:)\\b",
          "captures": {
            "1": {
              "name": "keyword.operator.splat.gleam"
            },
            "2": {
              "name": "entity.name.function.gleam"
            },
            "3": {
              "name": "variable.other.gleam"
            }
          }
        },
        {
          "match": "(\\|>)\\s(\\w+(?=\\.{1}))*(\\.){0,1}(\\w*\\b)",
          "captures": {
            "1": {
              "name": "keyword.operator.pipe.gleam"
            },
            "2": {
              "name": "variable.other.gleam"
            },
            "3": {
              "name": "punctuation.accessor.gleam"
            },
            "4": {
              "name": "entity.name.function.gleam"
            }
          }
        },
        {
          "name": "variable.parameter.gleam",
          "match": "\\b([[:lower:]][[:word:]]*):\\s"
        },
        {
          "name": "entity.name.namespace.gleam",
          "match": "\\b([[:lower:]][[:word:]]*):"
        }
      ]
    }
  },
  "scopeName": "source.gleam"
}
